package com.lukyanov.giev.util;

import java.util.LinkedList;
import java.util.List;
import java.util.stream.Collectors;

import com.google.common.collect.ImmutableList;
import com.lukyanov.giev.algorithm.Chromosome;
import com.lukyanov.giev.algorithm.Individ;


public class CoordinatesExecutor {
   private static List<Chromosome> cityChromosomes = ImmutableList.<Chromosome> builder()
         .add(Chromosome.builder().id(1).xValue(3600).yValue(2300).build())
         .add(Chromosome.builder().id(2).xValue(3100).yValue(3300).build())
         .add(Chromosome.builder().id(3).xValue(4700).yValue(5750).build())
         .add(Chromosome.builder().id(4).xValue(5400).yValue(5750).build())
         .add(Chromosome.builder().id(5).xValue(5608).yValue(7103).build())
         .add(Chromosome.builder().id(6).xValue(4493).yValue(7102).build())
         .add(Chromosome.builder().id(7).xValue(3600).yValue(6950).build())
         .add(Chromosome.builder().id(8).xValue(3100).yValue(7250).build())
         .add(Chromosome.builder().id(9).xValue(4700).yValue(8450).build())
         .add(Chromosome.builder().id(10).xValue(5400).yValue(8450).build())
         .add(Chromosome.builder().id(11).xValue(5610).yValue(10053).build())
         .add(Chromosome.builder().id(12).xValue(4492).yValue(10052).build())
         .add(Chromosome.builder().id(13).xValue(3600).yValue(10800).build())
         .add(Chromosome.builder().id(14).xValue(3100).yValue(10950).build())
         .add(Chromosome.builder().id(15).xValue(4700).yValue(11650).build())
         .add(Chromosome.builder().id(16).xValue(5400).yValue(11650).build())
         .add(Chromosome.builder().id(17).xValue(6650).yValue(10800).build())
         .add(Chromosome.builder().id(18).xValue(7300).yValue(10950).build())
         .add(Chromosome.builder().id(19).xValue(7300).yValue(7250).build())
         .add(Chromosome.builder().id(20).xValue(6650).yValue(6950).build())
         .add(Chromosome.builder().id(21).xValue(7300).yValue(3300).build())
         .add(Chromosome.builder().id(22).xValue(6650).yValue(2300).build())
         .add(Chromosome.builder().id(23).xValue(5400).yValue(1600).build())
         .add(Chromosome.builder().id(24).xValue(8350).yValue(2300).build())
         .add(Chromosome.builder().id(25).xValue(7850).yValue(3300).build())
         .add(Chromosome.builder().id(26).xValue(9450).yValue(5750).build())
         .add(Chromosome.builder().id(27).xValue(10150).yValue(5750).build())
         .add(Chromosome.builder().id(28).xValue(10358).yValue(7103).build())
         .add(Chromosome.builder().id(29).xValue(9243).yValue(7102).build())
         .add(Chromosome.builder().id(30).xValue(8350).yValue(6950).build())
         .add(Chromosome.builder().id(31).xValue(7850).yValue(7250).build())
         .add(Chromosome.builder().id(32).xValue(9450).yValue(8450).build())
         .add(Chromosome.builder().id(33).xValue(10150).yValue(8450).build())
         .add(Chromosome.builder().id(34).xValue(10360).yValue(10053).build())
         .add(Chromosome.builder().id(35).xValue(9242).yValue(10052).build())
         .add(Chromosome.builder().id(36).xValue(8350).yValue(10800).build())
         .add(Chromosome.builder().id(37).xValue(7850).yValue(10950).build())
         .add(Chromosome.builder().id(38).xValue(9450).yValue(11650).build())
         .add(Chromosome.builder().id(39).xValue(10150).yValue(11650).build())
         .add(Chromosome.builder().id(40).xValue(11400).yValue(10800).build())
         .add(Chromosome.builder().id(41).xValue(12050).yValue(10950).build())
         .add(Chromosome.builder().id(42).xValue(12050).yValue(7250).build())
         .add(Chromosome.builder().id(43).xValue(11400).yValue(6950).build())
         .add(Chromosome.builder().id(44).xValue(12050).yValue(3300).build())
         .add(Chromosome.builder().id(45).xValue(11400).yValue(2300).build())
         .add(Chromosome.builder().id(46).xValue(10150).yValue(1600).build())
         .add(Chromosome.builder().id(47).xValue(13100).yValue(2300).build())
         .add(Chromosome.builder().id(48).xValue(12600).yValue(3300).build())
         .add(Chromosome.builder().id(49).xValue(14200).yValue(5750).build())
         .add(Chromosome.builder().id(50).xValue(14900).yValue(5750).build())
         .add(Chromosome.builder().id(51).xValue(15108).yValue(7103).build())
         .add(Chromosome.builder().id(52).xValue(13993).yValue(7102).build())
         .add(Chromosome.builder().id(53).xValue(13100).yValue(6950).build())
         .add(Chromosome.builder().id(54).xValue(12600).yValue(7250).build())
         .add(Chromosome.builder().id(55).xValue(14200).yValue(8450).build())
         .add(Chromosome.builder().id(56).xValue(14900).yValue(8450).build())
         .add(Chromosome.builder().id(57).xValue(15110).yValue(10053).build())
         .add(Chromosome.builder().id(58).xValue(13992).yValue(10052).build())
         .add(Chromosome.builder().id(59).xValue(13100).yValue(10800).build())
         .add(Chromosome.builder().id(60).xValue(12600).yValue(10950).build())
         .add(Chromosome.builder().id(61).xValue(14200).yValue(11650).build())
         .add(Chromosome.builder().id(62).xValue(14900).yValue(11650).build())
         .add(Chromosome.builder().id(63).xValue(16150).yValue(10800).build())
         .add(Chromosome.builder().id(64).xValue(16800).yValue(10950).build())
         .add(Chromosome.builder().id(65).xValue(16800).yValue(7250).build())
         .add(Chromosome.builder().id(66).xValue(16150).yValue(6950).build())
         .add(Chromosome.builder().id(67).xValue(16800).yValue(3300).build())
         .add(Chromosome.builder().id(68).xValue(16150).yValue(2300).build())
         .add(Chromosome.builder().id(69).xValue(14900).yValue(1600).build())
         .add(Chromosome.builder().id(70).xValue(19800).yValue(800).build())
         .add(Chromosome.builder().id(71).xValue(19800).yValue(10000).build())
         .add(Chromosome.builder().id(72).xValue(19800).yValue(11900).build())
         .add(Chromosome.builder().id(73).xValue(19800).yValue(12200).build())
         .add(Chromosome.builder().id(74).xValue(200).yValue(12200).build())
         .add(Chromosome.builder().id(75).xValue(200).yValue(1100).build())
         .add(Chromosome.builder().id(76).xValue(200).yValue(800).build())
         .build();

   public static LinkedList<Chromosome> getCitiesCoords() {
      return new LinkedList<>(cityChromosomes);
   }

   public static List<Integer> getEthalonIdList() {
      return ImmutableList.<Integer> builder()
            .add(1)
            .add(76)
            .add(75)
            .add(2)
            .add(3)
            .add(4)
            .add(5)
            .add(6)
            .add(7)
            .add(8)
            .add(9)
            .add(10)
            .add(11)
            .add(12)
            .add(13)
            .add(14)
            .add(74)
            .add(15)
            .add(16)
            .add(17)
            .add(18)
            .add(37)
            .add(36)
            .add(38)
            .add(39)
            .add(40)
            .add(34)
            .add(35)
            .add(33)
            .add(32)
            .add(29)
            .add(30)
            .add(31)
            .add(19)
            .add(20)
            .add(26)
            .add(27)
            .add(28)
            .add(43)
            .add(42)
            .add(54)
            .add(53)
            .add(52)
            .add(55)
            .add(56)
            .add(57)
            .add(58)
            .add(59)
            .add(60)
            .add(41)
            .add(61)
            .add(62)
            .add(63)
            .add(64)
            .add(73)
            .add(72)
            .add(71)
            .add(65)
            .add(66)
            .add(51)
            .add(49)
            .add(50)
            .add(67)
            .add(70)
            .add(68)
            .add(69)
            .add(47)
            .add(48)
            .add(44)
            .add(45)
            .add(46)
            .add(24)
            .add(25)
            .add(21)
            .add(22)
            .add(23)
            .build();

   }

   public static Individ optimalPathIndivid() {
      return Individ.builder().chromosomes(getEthalonIdList().stream().map(id -> cityChromosomes.stream().filter(
            ch -> ch.getId() == id).findFirst().get()).collect(
            Collectors.toList())).build();
   }

}
